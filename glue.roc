app [makeGlue] {
    pf: platform "https://github.com/lukewilliamboswell/roc/releases/download/test/olBfrjtI-HycorWJMxdy7Dl2pcbbBoJy4mnSrDtRrlI.tar.br",
    json: "https://github.com/lukewilliamboswell/roc-json/releases/download/0.10.0/KbIfTNbxShRX1A1FgXei1SpO5Jn8sgP6HP6PXbi-xyA.tar.br",
    glue: "https://github.com/lukewilliamboswell/roc-glue-code-gen/releases/download/0.1.0/NprKi63CKBinQjoke2ttsOTHmjmsrmsILzRgzlds02c.tar.br",
}

import pf.Types exposing [Types]
import pf.File exposing [File]
import json.Json
import glue.Zig
import glue.Target

makeGlue : List Types -> Result (List File) Str
makeGlue = \types ->

    [
        # include the hardcoded/vendored builtins
        Zig.builtins,

        # code gen for each architecture (not currently used)
        List.map types \typesForArch -> { name: "glueForArch/$(Types.target typesForArch |> Target.toStr).zig", content: codeGenTypes typesForArch },

        # code gen using just the first
        List.first types
        |> Result.map \typesForArch -> [{ name: "glue.zig", content: codeGenTypes typesForArch }]
        |> Result.withDefault [],

        # include the types encoded as JSON to assist with debugging
        List.first types
        |> Result.map \typesForArch -> [{ name: "types.json", content: Encode.toBytes  typesForArch Json.utf8
        |> Str.fromUtf8
        |> Result.withDefault "INVALID UTF8 ENCODED FROM JSON" }]
        |> Result.withDefault [],
    ]
    |> List.join
    |> Ok

codeGenTypes : Types -> Str
codeGenTypes = \types ->

    declarations = Types.walkShapes types (List.withCapacity 1000) \decls, type, _id ->

        decl = \new -> List.append decls new

        when type is
            Unit
            | Unsized
            | EmptyTagUnion
            | Num _
            | Bool
            | RocResult _ _
            | RocStr
            | RocDict _ _
            | RocSet _
            | RocList _
            | RocBox _ ->
                # These types are included in roc_std and vendored from builtins
                # TODO: Do we want to generate these types?
                decls

            _ -> decl "// Unsupported type not included $(Inspect.toStr type)"

    """
    // ⚠️ GENERATED CODE ⚠️
    //
    // generated by the `roc glue` CLI command
    //

    $(Str.joinWith declarations "\n\n")
    """
